// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//https://prismaliser.app?code=%3D

//https://cloud.prisma.io/projects
//https://www.tpu-ptfe.com/post/6329.html
//npx prisma db push  
//email:eric.liu@gmail.com
//psw:Baza7183!
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                           Int                    @id @default(autoincrement())
  email                        String                 @unique
  password                     String
  name                         String
  address                      String?
  role                         UserRole               @default(USER)
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  profile                      Profile?
  financialTransactionsFrom    FinancialTransaction[] @relation("userFrom")
  financialTransactionsTo      FinancialTransaction[] @relation("userTo")
  financialTransactionsInputer FinancialTransaction[] @relation("inputer")
  sellerOrders                 Order[]                @relation("seller")
  clientOrders                 Order[]                @relation("client")
  orderInputer                 OrderProduct[]         @relation("inputer")
  productInputer               Product[]              @relation("inputer")
}

model Profile {
  id     Int     @id @default(autoincrement())
  avatar String?
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  englishName String
  chineseName String
  russionName String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id               Int            @id @default(autoincrement())
  codeFromSupplier String
  codeGenerated    String
  name             String
  description      String?
  usage            Garments[]
  ingredient       Ingredient[]
  price            Float?
  cost             Float?
  imageUrl         String[]
  isFeatured       Boolean?       @default(false)
  color            String?
  gram             Float?
  width            Float?
  stockCount       Float?         @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  categoryId       Int?
  category         Category?      @relation(fields: [categoryId], references: [id])
  orderProducts    OrderProduct[]
  inputerId        Int?
  inputer          User?          @relation("inputer", fields: [inputerId], references: [id])
}

model Order {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  status               OrderStatus            @default(PENDING)
  total                Float
  stripeChargeId       String?
  sellerId             Int
  seller               User                   @relation("seller", fields: [sellerId], references: [id])
  clientId             Int
  client               User                   @relation("client", fields: [clientId], references: [id])
  orderProducts        OrderProduct[]
  logisticStatus       LogisticStatus
  soldAtPrice          Float                  @default(0)
  costAtPrice          Float                  @default(0)
  financialTransaction FinancialTransaction[]
}

model OrderProduct {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  quantity       Int
  orderId        Int
  order          Order          @relation(fields: [orderId], references: [id])
  productId      Int
  product        Product        @relation(fields: [productId], references: [id])
  soldAtPrice    Float
  logisticStatus LogisticStatus
  inputerId      Int
  inputer        User           @relation("inputer", fields: [inputerId], references: [id])
}

model FinancialTransaction {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  status      TransactionStatus
  description String
  amount      Float
  orderId     Int?
  order       Order?            @relation(fields: [orderId], references: [id])
  userFromId  Int
  userFrom    User              @relation("userFrom", fields: [userFromId], references: [id])
  userToId    Int
  userTo      User              @relation("userTo", fields: [userToId], references: [id])
  inputerId   Int
  inputer     User              @relation("inputer", fields: [inputerId], references: [id])
}

enum UserRole {
  ADMIN
  USER
  CLIENT
  INKUSER
  BISHKEKUSER
  CHINESEUSER
  PENDING
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
}

enum TransactionStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
}

enum LogisticStatus {
  WareHouseInChina
  WareHouseLogistic
  OneTheWay
  WareHouseInBishkek
  Delivered
}

model Garments {
  id          Int       @id @default(autoincrement())
  name        String
  englishName String
  chineseName String
  russionName String
  products    Product[]
}

model Ingredient {
  id         Int      @id @default(autoincrement())
  materal    Material @relation(fields: [materialId], references: [id])
  materialId Int
  percentage Float
  product    Product? @relation(fields: [productId], references: [id])
  productId  Int?
}

model Material {
  id          Int          @id @default(autoincrement())
  englishName String
  chineseName String
  russionName String
  ingredient  Ingredient[]
}
