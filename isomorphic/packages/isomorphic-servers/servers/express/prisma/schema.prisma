// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//https://prismaliser.app?code=bW9kZWwgVXNlciB7CiAgaWQgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnQgICAgICAgICAgICAgICAgICAgIEBpZCBAZGVmYXVsdChhdXRvaW5jcmVtZW50KCkpCiAgZW1haWwgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcgICAgICAgICAgICAgICAgIEB1bmlxdWUKICBwYXNzd29yZCAgICAgICAgICAgICAgICAgICAgIFN0cmluZwogIG5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nCiAgYWRkcmVzcyAgICAgICAgICAgICAgICAgICAgICBTdHJpbmc_CiAgcm9sZSAgICAgICAgICAgICAgICAgICAgICAgICBVc2VyUm9sZSAgICAgICAgICAgICAgIEBkZWZhdWx0KFVTRVIpCiAgY3JlYXRlZEF0ICAgICAgICAgICAgICAgICAgICBEYXRlVGltZSAgICAgICAgICAgICAgIEBkZWZhdWx0KG5vdygpKQogIHVwZGF0ZWRBdCAgICAgICAgICAgICAgICAgICAgRGF0ZVRpbWUgICAgICAgICAgICAgICBAdXBkYXRlZEF0CiAgcHJvZmlsZSAgICAgICAgICAgICAgICAgICAgICBQcm9maWxlPwogIGZpbmFuY2lhbFRyYW5zYWN0aW9uc0Zyb20gICAgRmluYW5jaWFsVHJhbnNhY3Rpb25bXSBAcmVsYXRpb24oInVzZXJGcm9tIikKICBmaW5hbmNpYWxUcmFuc2FjdGlvbnNUbyAgICAgIEZpbmFuY2lhbFRyYW5zYWN0aW9uW10gQHJlbGF0aW9uKCJ1c2VyVG8iKQogIGZpbmFuY2lhbFRyYW5zYWN0aW9uc0lucHV0ZXIgRmluYW5jaWFsVHJhbnNhY3Rpb25bXSBAcmVsYXRpb24oImlucHV0ZXIiKQogIHNlbGxlck9yZGVycyAgICAgICAgICAgICAgICAgT3JkZXJbXSAgICAgICAgICAgICAgICBAcmVsYXRpb24oInNlbGxlciIpCiAgY2xpZW50T3JkZXJzICAgICAgICAgICAgICAgICBPcmRlcltdICAgICAgICAgICAgICAgIEByZWxhdGlvbigiY2xpZW50IikKICBvcmRlcklucHV0ZXIgICAgICAgICAgICAgICAgIE9yZGVyUHJvZHVjdFtdICAgICAgICAgQHJlbGF0aW9uKCJpbnB1dGVyIikKfQoKbW9kZWwgUHJvZmlsZSB7CiAgaWQgICAgIEludCAgICAgQGlkIEBkZWZhdWx0KGF1dG9pbmNyZW1lbnQoKSkKICBhdmF0YXIgU3RyaW5nPwogIGJpbyAgICBTdHJpbmc_CiAgdXNlcklkIEludCAgICAgQHVuaXF1ZQogIHVzZXIgICBVc2VyICAgIEByZWxhdGlvbihmaWVsZHM6IFt1c2VySWRdLCByZWZlcmVuY2VzOiBbaWRdKQp9Cgptb2RlbCBDYXRlZ29yeSB7CiAgaWQgICAgICAgICAgSW50ICAgICAgIEBpZCBAZGVmYXVsdChhdXRvaW5jcmVtZW50KCkpCiAgZW5nbGlzaE5hbWUgU3RyaW5nCiAgY2hpbmVzZU5hbWUgU3RyaW5nCiAgcnVzc2lvbk5hbWUgU3RyaW5nCiAgZGVzY3JpcHRpb24gU3RyaW5nPwogIGNyZWF0ZWRBdCAgIERhdGVUaW1lICBAZGVmYXVsdChub3coKSkKICB1cGRhdGVkQXQgICBEYXRlVGltZSAgQHVwZGF0ZWRBdAogIHByb2R1Y3RzICAgIFByb2R1Y3RbXQp9Cgptb2RlbCBQcm9kdWN0IHsKICBpZCAgICAgICAgICAgICAgIEludCAgICAgICAgICAgIEBpZCBAZGVmYXVsdChhdXRvaW5jcmVtZW50KCkpCiAgY29kZUZyb21TdXBwbGllciBTdHJpbmcKICBjb2RlR2VuZXJhdGVkICAgIFN0cmluZwogIG5hbWUgICAgICAgICAgICAgU3RyaW5nCiAgZGVzY3JpcHRpb24gICAgICBTdHJpbmc_CiAgdXNhZ2UgICAgICAgICAgICBHYXJtZW50c1tdCiAgaW5ncmVkaWVudCAgICAgICBJbmdyZWRpZW50W10KICBwcmljZSAgICAgICAgICAgIEZsb2F0PwogIGltYWdlVXJsICAgICAgICAgU3RyaW5nW10KICBpc0ZlYXR1cmVkICAgICAgIEJvb2xlYW4_ICAgICAgIEBkZWZhdWx0KGZhbHNlKQogIGNvbG9yICAgICAgICAgICAgU3RyaW5nPwogIGdyYW0gICAgICAgICAgICAgRmxvYXQ_CiAgd2lkdGggICAgICAgICAgICBGbG9hdD8KICBzdG9ja0NvdW50ICAgICAgIEZsb2F0PyAgICAgICAgIEBkZWZhdWx0KDApCiAgY3JlYXRlZEF0ICAgICAgICBEYXRlVGltZSAgICAgICBAZGVmYXVsdChub3coKSkKICB1cGRhdGVkQXQgICAgICAgIERhdGVUaW1lICAgICAgIEB1cGRhdGVkQXQKICBjYXRlZ29yeUlkICAgICAgIEludAogIGNhdGVnb3J5ICAgICAgICAgQ2F0ZWdvcnk_ICAgICAgQHJlbGF0aW9uKGZpZWxkczogW2NhdGVnb3J5SWRdLCByZWZlcmVuY2VzOiBbaWRdKQogIG9yZGVyUHJvZHVjdHMgICAgT3JkZXJQcm9kdWN0W10KfQoKbW9kZWwgT3JkZXIgewogIGlkICAgICAgICAgICAgICAgICAgIEludCAgICAgICAgICAgICAgICAgICAgQGlkIEBkZWZhdWx0KGF1dG9pbmNyZW1lbnQoKSkKICBjcmVhdGVkQXQgICAgICAgICAgICBEYXRlVGltZSAgICAgICAgICAgICAgIEBkZWZhdWx0KG5vdygpKQogIHVwZGF0ZWRBdCAgICAgICAgICAgIERhdGVUaW1lICAgICAgICAgICAgICAgQHVwZGF0ZWRBdAogIHN0YXR1cyAgICAgICAgICAgICAgIE9yZGVyU3RhdHVzICAgICAgICAgICAgQGRlZmF1bHQoUEVORElORykKICB0b3RhbCAgICAgICAgICAgICAgICBGbG9hdAogIHN0cmlwZUNoYXJnZUlkICAgICAgIFN0cmluZz8KICBzZWxsZXJJZCAgICAgICAgICAgICBJbnQKICBzZWxsZXIgICAgICAgICAgICAgICBVc2VyICAgICAgICAgICAgICAgICAgIEByZWxhdGlvbigic2VsbGVyIiwgZmllbGRzOiBbc2VsbGVySWRdLCByZWZlcmVuY2VzOiBbaWRdKQogIGNsaWVudElkICAgICAgICAgICAgIEludAogIGNsaWVudCAgICAgICAgICAgICAgIFVzZXIgICAgICAgICAgICAgICAgICAgQHJlbGF0aW9uKCJjbGllbnQiLCBmaWVsZHM6IFtjbGllbnRJZF0sIHJlZmVyZW5jZXM6IFtpZF0pCiAgb3JkZXJQcm9kdWN0cyAgICAgICAgT3JkZXJQcm9kdWN0W10KICBsb2dpc3RpY1N0YXR1cyAgICAgICBMb2dpc3RpY1N0YXR1cwogIHNvbGRBdFByaWNlICAgICAgICAgIEZsb2F0ICAgICAgICAgICAgICAgICAgQGRlZmF1bHQoMCkKICBjb3N0QXRQcmljZSAgICAgICAgICBGbG9hdCAgICAgICAgICAgICAgICAgIEBkZWZhdWx0KDApCiAgZmluYW5jaWFsVHJhbnNhY3Rpb24gRmluYW5jaWFsVHJhbnNhY3Rpb25bXQp9Cgptb2RlbCBPcmRlclByb2R1Y3QgewogIGlkICAgICAgICAgICAgIEludCAgICAgICAgICAgIEBpZCBAZGVmYXVsdChhdXRvaW5jcmVtZW50KCkpCiAgY3JlYXRlZEF0ICAgICAgRGF0ZVRpbWUgICAgICAgQGRlZmF1bHQobm93KCkpCiAgdXBkYXRlZEF0ICAgICAgRGF0ZVRpbWUgICAgICAgQHVwZGF0ZWRBdAogIHF1YW50aXR5ICAgICAgIEludAogIG9yZGVySWQgICAgICAgIEludAogIG9yZGVyICAgICAgICAgIE9yZGVyICAgICAgICAgIEByZWxhdGlvbihmaWVsZHM6IFtvcmRlcklkXSwgcmVmZXJlbmNlczogW2lkXSkKICBwcm9kdWN0SWQgICAgICBJbnQKICBwcm9kdWN0ICAgICAgICBQcm9kdWN0ICAgICAgICBAcmVsYXRpb24oZmllbGRzOiBbcHJvZHVjdElkXSwgcmVmZXJlbmNlczogW2lkXSkKICBzb2xkQXRQcmljZSAgICBGbG9hdAogIGxvZ2lzdGljU3RhdHVzIExvZ2lzdGljU3RhdHVzCiAgaW5wdXRlcklkICAgICAgSW50CiAgaW5wdXRlciAgICAgICAgVXNlciAgICAgICAgICAgQHJlbGF0aW9uKCJpbnB1dGVyIiwgZmllbGRzOiBbaW5wdXRlcklkXSwgcmVmZXJlbmNlczogW2lkXSkKfQoKbW9kZWwgRmluYW5jaWFsVHJhbnNhY3Rpb24gewogIGlkICAgICAgICAgIEludCAgICAgICAgICAgICAgIEBpZCBAZGVmYXVsdChhdXRvaW5jcmVtZW50KCkpCiAgY3JlYXRlZEF0ICAgRGF0ZVRpbWUgICAgICAgICAgQGRlZmF1bHQobm93KCkpCiAgc3RhdHVzICAgICAgVHJhbnNhY3Rpb25TdGF0dXMKICBkZXNjcmlwdGlvbiBTdHJpbmcKICBhbW91bnQgICAgICBGbG9hdAogIG9yZGVySWQgICAgIEludD8KICBvcmRlciAgICAgICBPcmRlcj8gICAgICAgICAgICBAcmVsYXRpb24oZmllbGRzOiBbb3JkZXJJZF0sIHJlZmVyZW5jZXM6IFtpZF0pCiAgdXNlckZyb21JZCAgSW50CiAgdXNlckZyb20gICAgVXNlciAgICAgICAgICAgICAgQHJlbGF0aW9uKCJ1c2VyRnJvbSIsIGZpZWxkczogW3VzZXJGcm9tSWRdLCByZWZlcmVuY2VzOiBbaWRdKQogIHVzZXJUb0lkICAgIEludAogIHVzZXJUbyAgICAgIFVzZXIgICAgICAgICAgICAgIEByZWxhdGlvbigidXNlclRvIiwgZmllbGRzOiBbdXNlclRvSWRdLCByZWZlcmVuY2VzOiBbaWRdKQogIGlucHV0ZXJJZCAgIEludAogIGlucHV0ZXIgICAgIFVzZXIgICAgICAgICAgICAgIEByZWxhdGlvbigiaW5wdXRlciIsIGZpZWxkczogW2lucHV0ZXJJZF0sIHJlZmVyZW5jZXM6IFtpZF0pCn0KCmVudW0gVXNlclJvbGUgewogIEFETUlOCiAgVVNFUgogIENMSUVOVAogIElOS1VTRVIKICBCSVNIS0VLVVNFUgogIENISU5FU0VVU0VSCiAgUEVORElORwp9CgplbnVtIE9yZGVyU3RhdHVzIHsKICBQRU5ESU5HCiAgUEFJRAogIFNISVBQRUQKICBERUxJVkVSRUQKfQoKZW51bSBUcmFuc2FjdGlvblN0YXR1cyB7CiAgUEVORElORwogIFBBSUQKICBTSElQUEVECiAgREVMSVZFUkVECn0KCmVudW0gTG9naXN0aWNTdGF0dXMgewogIFdhcmVIb3VzZUluQ2hpbmEKICBXYXJlSG91c2VMb2dpc3RpYwogIE9uZVRoZVdheQogIFdhcmVIb3VzZUluQmlzaGtlawogIERlbGl2ZXJlZAp9Cgptb2RlbCBHYXJtZW50cyB7CiAgaWQgICAgICAgICAgSW50ICAgICAgIEBpZCBAZGVmYXVsdChhdXRvaW5jcmVtZW50KCkpCiAgbmFtZSAgICAgICAgU3RyaW5nCiAgZW5nbGlzaE5hbWUgU3RyaW5nCiAgY2hpbmVzZU5hbWUgU3RyaW5nCiAgcnVzc2lvbk5hbWUgU3RyaW5nCiAgcHJvZHVjdHMgICAgUHJvZHVjdFtdCn0KCm1vZGVsIEluZ3JlZGllbnQgewogIGlkICAgICAgICAgSW50ICAgICBAaWQgQGRlZmF1bHQoYXV0b2luY3JlbWVudCgpKQogIG5hbWUgICAgICAgU3RyaW5nCiAgcGVyY2VudGFnZSBGbG9hdAogIHByb2R1Y3QgICAgUHJvZHVjdCBAcmVsYXRpb24oZmllbGRzOiBbcHJvZHVjdElkXSwgcmVmZXJlbmNlczogW2lkXSkKICBwcm9kdWN0SWQgIEludAp9Cg%3D%3D
//https://cloud.prisma.io/projects
//https://www.tpu-ptfe.com/post/6329.html
//npx prisma db push  
//email:eric.liu@gmail.com
//psw:Baza7183!
datasource db { 
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model User {
  id                           Int                    @id @default(autoincrement())
  email                        String                 @unique
  password                     String
  name                         String
  address                      String?
  role                         UserRole               @default(USER)
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  profile                      Profile?
  financialTransactionsFrom    FinancialTransaction[] @relation("userFrom")
  financialTransactionsTo      FinancialTransaction[] @relation("userTo")
  financialTransactionsInputer FinancialTransaction[] @relation("inputer")
  sellerOrders                 Order[]                @relation("seller")
  clientOrders                 Order[]                @relation("client")
  orderInputer                 OrderProduct[]         @relation("inputer")
}

model Profile {
  id     Int     @id @default(autoincrement())
  avatar String?
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  englishName String
  chineseName String
  russionName String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id               Int            @id @default(autoincrement())
  codeFromSupplier String
  codeGenerated    String
  name             String
  description      String?
  usage            Garments[]
  ingredient       Ingredient[]
  price            Float?
  imageUrl         String[]
  isFeatured       Boolean?       @default(false)
  color            String?
  gram             Float?
  width            Float?
  stockCount       Float?         @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  categoryId       Int?
  category         Category?      @relation(fields: [categoryId], references: [id])
  orderProducts    OrderProduct[]
}

model Order {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  status               OrderStatus            @default(PENDING)
  total                Float
  stripeChargeId       String?
  sellerId             Int
  seller               User                   @relation("seller", fields: [sellerId], references: [id])
  clientId             Int
  client               User                   @relation("client", fields: [clientId], references: [id])
  orderProducts        OrderProduct[]
  logisticStatus       LogisticStatus
  soldAtPrice          Float                  @default(0)
  costAtPrice          Float                  @default(0)
  financialTransaction FinancialTransaction[]
}

model OrderProduct {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  quantity       Int
  orderId        Int
  order          Order          @relation(fields: [orderId], references: [id])
  productId      Int
  product        Product        @relation(fields: [productId], references: [id])
  soldAtPrice    Float
  logisticStatus LogisticStatus
  inputerId      Int
  inputer        User           @relation("inputer", fields: [inputerId], references: [id])
}

model FinancialTransaction {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  status      TransactionStatus
  description String
  amount      Float
  orderId     Int?
  order       Order?            @relation(fields: [orderId], references: [id])
  userFromId  Int
  userFrom    User              @relation("userFrom", fields: [userFromId], references: [id])
  userToId    Int
  userTo      User              @relation("userTo", fields: [userToId], references: [id])
  inputerId   Int
  inputer     User              @relation("inputer", fields: [inputerId], references: [id])
}

enum UserRole {
  ADMIN
  USER
  CLIENT
  INKUSER
  BISHKEKUSER
  CHINESEUSER
  PENDING
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
}

enum TransactionStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
}

enum LogisticStatus {
  WareHouseInChina
  WareHouseLogistic
  OneTheWay
  WareHouseInBishkek
  Delivered
}

model Garments {
  id          Int       @id @default(autoincrement())
  name        String
  englishName String
  chineseName String
  russionName String
  products    Product[]
}

model Ingredient {
  id         Int     @id @default(autoincrement())
  name       String
  percentage Float
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
}
